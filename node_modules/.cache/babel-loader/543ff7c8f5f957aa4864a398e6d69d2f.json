{"ast":null,"code":"'use strict';\n\nvar iconv = require('iconv-lite');\n/**\n * Character set encoding and decoding functions\n */\n\n\nvar charset = module.exports = {\n  /**\n   * Encodes an unicode string into an Buffer object as UTF-8\n   *\n   * We force UTF-8 here, no strange encodings allowed.\n   *\n   * @param {String} str String to be encoded\n   * @return {Buffer} UTF-8 encoded typed array\n   */\n  encode: function (str) {\n    return new Buffer(str, 'utf-8');\n  },\n\n  /**\n   * Decodes a string from Buffer to an unicode string using specified encoding\n   *\n   * @param {Buffer} buf Binary data to be decoded\n   * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset\n   * @return {String} Decded string\n   */\n  decode: function (buf, fromCharset) {\n    fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n    if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n      return buf.toString('utf-8');\n    }\n\n    return iconv.decode(buf, fromCharset);\n  },\n\n  /**\n   * Convert a string from specific encoding to UTF-8 Buffer\n   *\n   * @param {String|Buffer} str String to be encoded\n   * @param {String} [fromCharset='UTF-8'] Source encoding for the string\n   * @return {Buffer} UTF-8 encoded typed array\n   */\n  convert: function (data, fromCharset) {\n    fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n    var bufString;\n\n    if (typeof data !== 'string') {\n      if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n        return data;\n      }\n\n      bufString = charset.decode(data, fromCharset);\n      return charset.encode(bufString);\n    }\n\n    return charset.encode(data);\n  },\n\n  /**\n   * Converts well known invalid character set names to proper names.\n   * eg. win-1257 will be converted to WINDOWS-1257\n   *\n   * @param {String} charset Charset name to convert\n   * @return {String} Canoninicalized charset name\n   */\n  normalizeCharset: function (charset) {\n    var match;\n\n    if (match = charset.match(/^utf[\\-_]?(\\d+)$/i)) {\n      return 'UTF-' + match[1];\n    }\n\n    if (match = charset.match(/^win(?:dows)?[\\-_]?(\\d+)$/i)) {\n      return 'WINDOWS-' + match[1];\n    }\n\n    if (match = charset.match(/^latin[\\-_]?(\\d+)$/i)) {\n      return 'ISO-8859-' + match[1];\n    }\n\n    return charset;\n  }\n};","map":{"version":3,"sources":["/Users/aftab/Desktop/React/reactlivewebsite-master/node_modules/mailcomposer/node_modules/libmime/lib/charset.js"],"names":["iconv","require","charset","module","exports","encode","str","Buffer","decode","buf","fromCharset","normalizeCharset","test","toString","convert","data","bufString","match"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;AAEA;;;;;AAGA,IAAIC,OAAO,GAAGC,MAAM,CAACC,OAAP,GAAiB;AAE3B;;;;;;;;AAQAC,EAAAA,MAAM,EAAE,UAAUC,GAAV,EAAe;AACnB,WAAO,IAAIC,MAAJ,CAAWD,GAAX,EAAgB,OAAhB,CAAP;AACH,GAZ0B;;AAc3B;;;;;;;AAOAE,EAAAA,MAAM,EAAE,UAAUC,GAAV,EAAeC,WAAf,EAA4B;AAChCA,IAAAA,WAAW,GAAGR,OAAO,CAACS,gBAAR,CAAyBD,WAAW,IAAI,OAAxC,CAAd;;AAEA,QAAI,8BAA8BE,IAA9B,CAAmCF,WAAnC,CAAJ,EAAqD;AACjD,aAAOD,GAAG,CAACI,QAAJ,CAAa,OAAb,CAAP;AACH;;AAED,WAAOb,KAAK,CAACQ,MAAN,CAAaC,GAAb,EAAkBC,WAAlB,CAAP;AACH,GA7B0B;;AA+B3B;;;;;;;AAOAI,EAAAA,OAAO,EAAE,UAAUC,IAAV,EAAgBL,WAAhB,EAA6B;AAClCA,IAAAA,WAAW,GAAGR,OAAO,CAACS,gBAAR,CAAyBD,WAAW,IAAI,OAAxC,CAAd;AAEA,QAAIM,SAAJ;;AAEA,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,UAAI,8BAA8BH,IAA9B,CAAmCF,WAAnC,CAAJ,EAAqD;AACjD,eAAOK,IAAP;AACH;;AACDC,MAAAA,SAAS,GAAGd,OAAO,CAACM,MAAR,CAAeO,IAAf,EAAqBL,WAArB,CAAZ;AACA,aAAOR,OAAO,CAACG,MAAR,CAAeW,SAAf,CAAP;AACH;;AACD,WAAOd,OAAO,CAACG,MAAR,CAAeU,IAAf,CAAP;AACH,GAnD0B;;AAqD3B;;;;;;;AAOAJ,EAAAA,gBAAgB,EAAE,UAAUT,OAAV,EAAmB;AACjC,QAAIe,KAAJ;;AAEA,QAAKA,KAAK,GAAGf,OAAO,CAACe,KAAR,CAAc,mBAAd,CAAb,EAAkD;AAC9C,aAAO,SAASA,KAAK,CAAC,CAAD,CAArB;AACH;;AAED,QAAKA,KAAK,GAAGf,OAAO,CAACe,KAAR,CAAc,4BAAd,CAAb,EAA2D;AACvD,aAAO,aAAaA,KAAK,CAAC,CAAD,CAAzB;AACH;;AAED,QAAKA,KAAK,GAAGf,OAAO,CAACe,KAAR,CAAc,qBAAd,CAAb,EAAoD;AAChD,aAAO,cAAcA,KAAK,CAAC,CAAD,CAA1B;AACH;;AAED,WAAOf,OAAP;AACH;AA5E0B,CAA/B","sourcesContent":["'use strict';\n\nvar iconv = require('iconv-lite');\n\n/**\n * Character set encoding and decoding functions\n */\nvar charset = module.exports = {\n\n    /**\n     * Encodes an unicode string into an Buffer object as UTF-8\n     *\n     * We force UTF-8 here, no strange encodings allowed.\n     *\n     * @param {String} str String to be encoded\n     * @return {Buffer} UTF-8 encoded typed array\n     */\n    encode: function (str) {\n        return new Buffer(str, 'utf-8');\n    },\n\n    /**\n     * Decodes a string from Buffer to an unicode string using specified encoding\n     *\n     * @param {Buffer} buf Binary data to be decoded\n     * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset\n     * @return {String} Decded string\n     */\n    decode: function (buf, fromCharset) {\n        fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n        if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n            return buf.toString('utf-8');\n        }\n\n        return iconv.decode(buf, fromCharset);\n    },\n\n    /**\n     * Convert a string from specific encoding to UTF-8 Buffer\n     *\n     * @param {String|Buffer} str String to be encoded\n     * @param {String} [fromCharset='UTF-8'] Source encoding for the string\n     * @return {Buffer} UTF-8 encoded typed array\n     */\n    convert: function (data, fromCharset) {\n        fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n        var bufString;\n\n        if (typeof data !== 'string') {\n            if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n                return data;\n            }\n            bufString = charset.decode(data, fromCharset);\n            return charset.encode(bufString);\n        }\n        return charset.encode(data);\n    },\n\n    /**\n     * Converts well known invalid character set names to proper names.\n     * eg. win-1257 will be converted to WINDOWS-1257\n     *\n     * @param {String} charset Charset name to convert\n     * @return {String} Canoninicalized charset name\n     */\n    normalizeCharset: function (charset) {\n        var match;\n\n        if ((match = charset.match(/^utf[\\-_]?(\\d+)$/i))) {\n            return 'UTF-' + match[1];\n        }\n\n        if ((match = charset.match(/^win(?:dows)?[\\-_]?(\\d+)$/i))) {\n            return 'WINDOWS-' + match[1];\n        }\n\n        if ((match = charset.match(/^latin[\\-_]?(\\d+)$/i))) {\n            return 'ISO-8859-' + match[1];\n        }\n\n        return charset;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}