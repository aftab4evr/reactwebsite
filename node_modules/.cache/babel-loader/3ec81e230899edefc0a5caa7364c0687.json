{"ast":null,"code":"const {\n  createConnection\n} = require('net');\n\nconst {\n  resolveMx\n} = require('dns');\n\nconst {\n  DKIMSign\n} = require('dkim-signer');\n\nconst CRLF = '\\r\\n';\n\nfunction dummy() {}\n\nmodule.exports = function (options) {\n  options = options || {};\n  const logger = options.logger || options.silent && {\n    debug: dummy,\n    info: dummy,\n    warn: dummy,\n    error: dummy\n  } || {\n    debug: console.log,\n    info: console.info,\n    warn: console.warn,\n    error: console.error\n  };\n  const dkimPrivateKey = (options.dkim || {}).privateKey;\n  const dkimKeySelector = (options.dkim || {}).keySelector || 'dkim';\n  const devPort = options.devPort || -1;\n  const devHost = options.devHost || 'localhost';\n  const smtpPort = options.smtpPort || 25;\n  const smtpHost = options.smtpHost || -1;\n  /*\n   *   邮件服务返回代码含义 Mail service return code Meaning\n   *   500   格式错误，命令不可识别（此错误也包括命令行过长）format error, command unrecognized (This error also includes command line too long)\n   *   501   参数格式错误 parameter format error\n   *   502   命令不可实现 command can not be achieved\n   *   503   错误的命令序列 Bad sequence of commands\n   *   504   命令参数不可实现 command parameter can not be achieved\n   *   211   系统状态或系统帮助响应 System status, or system help response\n   *   214   帮助信息 help\n   *   220   服务就绪 Services Ready\n   *   221   服务关闭传输信道 Service closing transmission channel\n   *   421   服务未就绪，关闭传输信道（当必须关闭时，此应答可以作为对任何命令的响应）service is not ready to close the transmission channel (when it is necessary to close, this response may be in response to any command)\n   *   250   要求的邮件操作完成 requested mail action completed\n   *   251   用户非本地，将转发向 non-local users will be forwarded to\n   *   450   要求的邮件操作未完成，邮箱不可用（例如，邮箱忙）Mail the required operation 450 unfinished, mailbox unavailable (for example, mailbox busy)\n   *   550   要求的邮件操作未完成，邮箱不可用（例如，邮箱未找到，或不可访问）Mail action not completed the required 550 mailbox unavailable (eg, mailbox not found, no access)\n   *   451   放弃要求的操作；处理过程中出错 waiver operation; processing error\n   *   551   用户非本地，请尝试 non-local user, please try\n   *   452   系统存储不足，要求的操作未执行 Less than 452 storage system, requiring action not taken\n   *   552   过量的存储分配，要求的操作未执行 excess storage allocation requires action not taken\n   *   553   邮箱名不可用，要求的操作未执行（例如邮箱格式错误） mailbox name is not available, that the requested operation is not performed (for example, mailbox format error)\n   *   354   开始邮件输入，以.结束 Start Mail input to. End\n   *   554   操作失败  The operation failed\n   *   535   用户验证失败 User authentication failed\n   *   235   用户验证成功 user authentication is successful\n   *   334   等待用户输入验证信息 waits for the user to enter authentication information\n   */\n\n  function getHost(email) {\n    const m = /[^@]+@([\\w\\d\\-\\.]+)/.exec(email);\n    return m && m[1];\n  }\n\n  function groupRecipients(recipients) {\n    let groups = {};\n    let host;\n    const recipients_length = recipients.length;\n\n    for (let i = 0; i < recipients_length; i++) {\n      host = getHost(recipients[i]);\n      (groups[host] || (groups[host] = [])).push(recipients[i]);\n    }\n\n    return groups;\n  }\n  /**\n   * connect to domain by Mx record\n   */\n\n\n  function connectMx(domain, callback) {\n    if (devPort === -1) {\n      // not in development mode -> search the MX\n      resolveMx(domain, function (err, data) {\n        if (err) {\n          return callback(err);\n        }\n\n        data.sort(function (a, b) {\n          return a.priority > b.priority;\n        });\n        logger.debug('mx resolved: ', data);\n\n        if (!data || data.length === 0) {\n          return callback(new Error('can not resolve Mx of <' + domain + '>'));\n        }\n\n        if (smtpHost !== -1) data.push({\n          exchange: smtpHost\n        });\n\n        function tryConnect(i) {\n          if (i >= data.length) return callback(new Error('can not connect to any SMTP server'));\n          const sock = createConnection(smtpPort, data[i].exchange);\n          sock.on('error', function (err) {\n            logger.error('Error on connectMx for: ', data[i], err);\n            tryConnect(++i);\n          });\n          sock.on('connect', function () {\n            logger.debug('MX connection created: ', data[i].exchange);\n            sock.removeAllListeners('error');\n            callback(null, sock);\n          });\n        }\n\n        tryConnect(0);\n      });\n    } else {\n      // development mode -> connect to the specified devPort on devHost\n      const sock = createConnection(devPort, devHost);\n      sock.on('error', function (err) {\n        callback(new Error('Error on connectMx (development) for \"' + devHost + ':' + devPort + '\": ' + err));\n      });\n      sock.on('connect', function () {\n        logger.debug('MX (development) connection created: ' + devHost + ':' + devPort);\n        sock.removeAllListeners('error');\n        callback(null, sock);\n      });\n    }\n  }\n\n  function sendToSMTP(domain, srcHost, from, recipients, body, cb) {\n    const callback = typeof cb === 'function' ? cb : function () {};\n    connectMx(domain, function (err, sock) {\n      if (err) {\n        logger.error('error on connectMx', err.stack);\n        return callback(err);\n      }\n\n      function w(s) {\n        logger.debug('send ' + domain + '>' + s);\n        sock.write(s + CRLF);\n      }\n\n      sock.setEncoding('utf8');\n      sock.on('data', function (chunk) {\n        data += chunk;\n        parts = data.split(CRLF);\n        const parts_length = parts.length - 1;\n\n        for (let i = 0, len = parts_length; i < len; i++) {\n          onLine(parts[i]);\n        }\n\n        data = parts[parts.length - 1];\n      });\n      sock.on('error', function (err) {\n        logger.error('fail to connect ' + domain);\n        callback(err);\n      });\n      let data = '';\n      let step = 0;\n      let loginStep = 0;\n      const queue = [];\n      const login = [];\n      let parts;\n      let cmd;\n      /*\n       if(mail.user && mail.pass){\n         queue.push('AUTH LOGIN');\n         login.push(new Buffer(mail.user).toString(\"base64\"));\n         login.push(new Buffer(mail.pass).toString(\"base64\"));\n       }\n       */\n\n      queue.push('MAIL FROM:<' + from + '>');\n      const recipients_length = recipients.length;\n\n      for (let i = 0; i < recipients_length; i++) {\n        queue.push('RCPT TO:<' + recipients[i] + '>');\n      }\n\n      queue.push('DATA');\n      queue.push('QUIT');\n      queue.push('');\n\n      function response(code, msg) {\n        switch (code) {\n          case 220:\n            //*   220   on server ready\n            //*   220   服务就绪\n            if (/\\besmtp\\b/i.test(msg)) {\n              // TODO:  determin AUTH type; auth login, auth crm-md5, auth plain\n              cmd = 'EHLO';\n            } else {\n              cmd = 'HELO';\n            }\n\n            w(cmd + ' ' + srcHost);\n            break;\n\n          case 221: // bye\n\n          case 235: // verify ok\n\n          case 250: // operation OK\n\n          case 251:\n            // foward\n            if (step === queue.length - 1) {\n              logger.info('OK:', code, msg);\n              callback(null, msg);\n            }\n\n            w(queue[step]);\n            step++;\n            break;\n\n          case 354:\n            // start input end with . (dot)\n            logger.info('sending mail', body);\n            w(body);\n            w('');\n            w('.');\n            break;\n\n          case 334:\n            // input login\n            w(login[loginStep]);\n            loginStep++;\n            break;\n\n          default:\n            if (code >= 400) {\n              logger.warn('SMTP responds error code', code);\n              callback(new Error('SMTP code:' + code + ' msg:' + msg));\n              sock.end();\n            }\n\n        }\n      }\n\n      let msg = '';\n\n      function onLine(line) {\n        logger.debug('recv ' + domain + '>' + line);\n        msg += line + CRLF;\n\n        if (line[3] === ' ') {\n          // 250-information dash is not complete.\n          // 250 OK. space is complete.\n          let lineNumber = parseInt(line);\n          response(lineNumber, msg);\n          msg = '';\n        }\n      }\n    });\n  }\n\n  function getAddress(address) {\n    return address.replace(/^.+</, '').replace(/>\\s*$/, '').trim();\n  }\n\n  function getAddresses(addresses) {\n    const results = [];\n\n    if (!Array.isArray(addresses)) {\n      addresses = addresses.split(',');\n    }\n\n    const addresses_length = addresses.length;\n\n    for (let i = 0; i < addresses_length; i++) {\n      results.push(getAddress(addresses[i]));\n    }\n\n    return results;\n  }\n  /**\n   * sendmail directly\n   *\n   * @param mail {object}\n   *             from\n   *             to\n   *             cc\n   *             bcc\n   *             replyTo\n   *             returnTo\n   *             subject\n   *             type         default 'text/plain', 'text/html'\n   *             charset      default 'utf-8'\n   *             encoding     default 'base64'\n   *             id           default timestamp+from\n   *             headers      object\n   *             content\n   *             attachments\n   *               [{\n   *                 type\n   *                 filename\n   *                 content\n   *               }].\n   *\n   * @param callback function(err, domain).\n   *\n   */\n\n\n  function sendmail(mail, callback) {\n    const mailcomposer = require('mailcomposer');\n\n    const mailMe = mailcomposer(mail);\n    let recipients = [];\n    let groups;\n    let srcHost;\n\n    if (mail.to) {\n      recipients = recipients.concat(getAddresses(mail.to));\n    }\n\n    if (mail.cc) {\n      recipients = recipients.concat(getAddresses(mail.cc));\n    }\n\n    if (mail.bcc) {\n      recipients = recipients.concat(getAddresses(mail.bcc));\n    }\n\n    groups = groupRecipients(recipients);\n    const from = getAddress(mail.from);\n    srcHost = getHost(from);\n    mailMe.build(function (err, message) {\n      if (err) {\n        logger.error('Error on creating message : ', err);\n        callback(err, null);\n        return;\n      }\n\n      if (dkimPrivateKey) {\n        const signature = DKIMSign(message, {\n          privateKey: dkimPrivateKey,\n          keySelector: dkimKeySelector,\n          domainName: srcHost\n        });\n        message = signature + '\\r\\n' + message;\n      }\n\n      for (let domain in groups) {\n        sendToSMTP(domain, srcHost, from, groups[domain], message, callback);\n      }\n    });\n  }\n\n  return sendmail;\n};","map":{"version":3,"sources":["/Users/aftab/Desktop/React/reactlivewebsite-master/node_modules/sendmail/sendmail.js"],"names":["createConnection","require","resolveMx","DKIMSign","CRLF","dummy","module","exports","options","logger","silent","debug","info","warn","error","console","log","dkimPrivateKey","dkim","privateKey","dkimKeySelector","keySelector","devPort","devHost","smtpPort","smtpHost","getHost","email","m","exec","groupRecipients","recipients","groups","host","recipients_length","length","i","push","connectMx","domain","callback","err","data","sort","a","b","priority","Error","exchange","tryConnect","sock","on","removeAllListeners","sendToSMTP","srcHost","from","body","cb","stack","w","s","write","setEncoding","chunk","parts","split","parts_length","len","onLine","step","loginStep","queue","login","cmd","response","code","msg","test","end","line","lineNumber","parseInt","getAddress","address","replace","trim","getAddresses","addresses","results","Array","isArray","addresses_length","sendmail","mail","mailcomposer","mailMe","to","concat","cc","bcc","build","message","signature","domainName"],"mappings":"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","sourcesContent":["const {createConnection} = require('net');\nconst {resolveMx} = require('dns');\nconst {DKIMSign} = require('dkim-signer');\nconst CRLF = '\\r\\n';\n\nfunction dummy () {}\nmodule.exports = function (options) {\n  options = options || {};\n  const logger = options.logger || (options.silent && {\n    debug: dummy,\n    info: dummy,\n    warn: dummy,\n    error: dummy\n  } || {\n    debug: console.log,\n    info: console.info,\n    warn: console.warn,\n    error: console.error\n  });\n  const dkimPrivateKey = (options.dkim || {}).privateKey;\n  const dkimKeySelector = (options.dkim || {}).keySelector || 'dkim';\n  const devPort = options.devPort || -1;\n  const devHost = options.devHost || 'localhost';\n  const smtpPort = options.smtpPort || 25\n  const smtpHost = options.smtpHost || -1\n  /*\n   *   邮件服务返回代码含义 Mail service return code Meaning\n   *   500   格式错误，命令不可识别（此错误也包括命令行过长）format error, command unrecognized (This error also includes command line too long)\n   *   501   参数格式错误 parameter format error\n   *   502   命令不可实现 command can not be achieved\n   *   503   错误的命令序列 Bad sequence of commands\n   *   504   命令参数不可实现 command parameter can not be achieved\n   *   211   系统状态或系统帮助响应 System status, or system help response\n   *   214   帮助信息 help\n   *   220   服务就绪 Services Ready\n   *   221   服务关闭传输信道 Service closing transmission channel\n   *   421   服务未就绪，关闭传输信道（当必须关闭时，此应答可以作为对任何命令的响应）service is not ready to close the transmission channel (when it is necessary to close, this response may be in response to any command)\n   *   250   要求的邮件操作完成 requested mail action completed\n   *   251   用户非本地，将转发向 non-local users will be forwarded to\n   *   450   要求的邮件操作未完成，邮箱不可用（例如，邮箱忙）Mail the required operation 450 unfinished, mailbox unavailable (for example, mailbox busy)\n   *   550   要求的邮件操作未完成，邮箱不可用（例如，邮箱未找到，或不可访问）Mail action not completed the required 550 mailbox unavailable (eg, mailbox not found, no access)\n   *   451   放弃要求的操作；处理过程中出错 waiver operation; processing error\n   *   551   用户非本地，请尝试 non-local user, please try\n   *   452   系统存储不足，要求的操作未执行 Less than 452 storage system, requiring action not taken\n   *   552   过量的存储分配，要求的操作未执行 excess storage allocation requires action not taken\n   *   553   邮箱名不可用，要求的操作未执行（例如邮箱格式错误） mailbox name is not available, that the requested operation is not performed (for example, mailbox format error)\n   *   354   开始邮件输入，以.结束 Start Mail input to. End\n   *   554   操作失败  The operation failed\n   *   535   用户验证失败 User authentication failed\n   *   235   用户验证成功 user authentication is successful\n   *   334   等待用户输入验证信息 waits for the user to enter authentication information\n   */\n\n  function getHost (email) {\n    const m = /[^@]+@([\\w\\d\\-\\.]+)/.exec(email);\n    return m && m[1];\n  }\n\n  function groupRecipients (recipients) {\n    let groups = {};\n    let host;\n    const recipients_length = recipients.length;\n    for (let i = 0; i < recipients_length; i++) {\n      host = getHost(recipients[i]);\n      (groups[host] || (groups[host] = [])).push(recipients[i])\n    }\n    return groups\n  }\n\n  /**\n   * connect to domain by Mx record\n   */\n  function connectMx (domain, callback) {\n    if (devPort === -1) { // not in development mode -> search the MX\n      resolveMx(domain, function (err, data) {\n        if (err) {\n          return callback(err)\n        }\n\n        data.sort(function (a, b) { return a.priority > b.priority });\n        logger.debug('mx resolved: ', data);\n\n        if (!data || data.length === 0) {\n          return callback(new Error('can not resolve Mx of <' + domain + '>'))\n        }\n        if(smtpHost !== -1)data.push({exchange:smtpHost})\n        function tryConnect (i) {\n          if (i >= data.length) return callback(new Error('can not connect to any SMTP server'));\n\n          const sock = createConnection(smtpPort, data[i].exchange);\n\n          sock.on('error', function (err) {\n            logger.error('Error on connectMx for: ', data[i], err);\n            tryConnect(++i)\n          });\n\n          sock.on('connect', function () {\n            logger.debug('MX connection created: ', data[i].exchange);\n            sock.removeAllListeners('error');\n            callback(null, sock)\n          })\n        }\n\n        tryConnect(0)\n      })\n    } else { // development mode -> connect to the specified devPort on devHost\n      const sock = createConnection(devPort, devHost);\n\n      sock.on('error', function (err) {\n        callback(new Error('Error on connectMx (development) for \"'+ devHost +':' + devPort + '\": ' + err))\n      });\n\n      sock.on('connect', function () {\n        logger.debug('MX (development) connection created: '+ devHost +':' + devPort);\n        sock.removeAllListeners('error');\n        callback(null, sock)\n      })\n    }\n  }\n\n  function sendToSMTP (domain, srcHost, from, recipients, body, cb) {\n    const callback = (typeof cb === 'function') ? cb : function () {};\n    connectMx(domain, function (err, sock) {\n      if (err) {\n        logger.error('error on connectMx', err.stack);\n        return callback(err)\n      }\n\n      function w (s) {\n        logger.debug('send ' + domain + '>' + s);\n        sock.write(s + CRLF)\n      }\n\n      sock.setEncoding('utf8');\n\n      sock.on('data', function (chunk) {\n        data += chunk;\n        parts = data.split(CRLF);\n        const parts_length = parts.length - 1;\n        for (let i = 0, len = parts_length; i < len; i++) {\n          onLine(parts[i])\n        }\n        data = parts[parts.length - 1]\n      });\n\n      sock.on('error', function (err) {\n        logger.error('fail to connect ' + domain)\n        callback(err)\n      });\n\n      let data = '';\n      let step = 0;\n      let loginStep = 0;\n      const queue = [];\n      const login = [];\n      let parts;\n      let cmd;\n\n        /*\n         if(mail.user && mail.pass){\n           queue.push('AUTH LOGIN');\n           login.push(new Buffer(mail.user).toString(\"base64\"));\n           login.push(new Buffer(mail.pass).toString(\"base64\"));\n         }\n         */\n\n      queue.push('MAIL FROM:<' + from + '>');\n      const recipients_length = recipients.length;\n      for (let i = 0; i < recipients_length; i++) {\n        queue.push('RCPT TO:<' + recipients[i] + '>')\n      }\n      queue.push('DATA');\n      queue.push('QUIT');\n      queue.push('');\n\n      function response (code, msg) {\n        switch (code) {\n          case 220:\n            //*   220   on server ready\n            //*   220   服务就绪\n            if (/\\besmtp\\b/i.test(msg)) {\n              // TODO:  determin AUTH type; auth login, auth crm-md5, auth plain\n              cmd = 'EHLO'\n            } else {\n              cmd = 'HELO'\n            }\n            w(cmd + ' ' + srcHost);\n            break;\n\n          case 221: // bye\n          case 235: // verify ok\n          case 250: // operation OK\n          case 251: // foward\n            if (step === queue.length - 1) {\n              logger.info('OK:', code, msg);\n              callback(null, msg)\n            }\n            w(queue[step]);\n            step++;\n            break;\n\n          case 354: // start input end with . (dot)\n            logger.info('sending mail', body);\n            w(body);\n            w('');\n            w('.');\n            break;\n\n          case 334: // input login\n            w(login[loginStep]);\n            loginStep++;\n            break;\n\n          default:\n            if (code >= 400) {\n              logger.warn('SMTP responds error code', code);\n              callback(new Error('SMTP code:' + code + ' msg:' + msg));\n              sock.end();\n            }\n        }\n      }\n\n      let msg = '';\n\n      function onLine (line) {\n        logger.debug('recv ' + domain + '>' + line);\n\n        msg += (line + CRLF);\n\n        if (line[3] === ' ') {\n            // 250-information dash is not complete.\n            // 250 OK. space is complete.\n          let lineNumber = parseInt(line);\n          response(lineNumber, msg);\n          msg = '';\n        }\n      }\n    })\n  }\n\n  function getAddress (address) {\n    return address.replace(/^.+</, '').replace(/>\\s*$/, '').trim();\n  }\n\n  function getAddresses (addresses) {\n    const results = [];\n    if (!Array.isArray(addresses)) {\n      addresses = addresses.split(',');\n    }\n\n    const addresses_length = addresses.length;\n    for (let i = 0; i < addresses_length; i++) {\n      results.push(getAddress(addresses[i]));\n    }\n    return results\n  }\n\n  /**\n   * sendmail directly\n   *\n   * @param mail {object}\n   *             from\n   *             to\n   *             cc\n   *             bcc\n   *             replyTo\n   *             returnTo\n   *             subject\n   *             type         default 'text/plain', 'text/html'\n   *             charset      default 'utf-8'\n   *             encoding     default 'base64'\n   *             id           default timestamp+from\n   *             headers      object\n   *             content\n   *             attachments\n   *               [{\n   *                 type\n   *                 filename\n   *                 content\n   *               }].\n   *\n   * @param callback function(err, domain).\n   *\n   */\n  function sendmail (mail, callback) {\n    const mailcomposer = require('mailcomposer');\n    const mailMe = mailcomposer(mail);\n    let recipients = [];\n    let groups;\n    let srcHost;\n    if (mail.to) {\n      recipients = recipients.concat(getAddresses(mail.to))\n    }\n\n    if (mail.cc) {\n      recipients = recipients.concat(getAddresses(mail.cc))\n    }\n\n    if (mail.bcc) {\n      recipients = recipients.concat(getAddresses(mail.bcc))\n    }\n\n    groups = groupRecipients(recipients);\n\n    const from = getAddress(mail.from);\n    srcHost = getHost(from);\n\n    mailMe.build(function (err, message) {\n      if (err) {\n        logger.error('Error on creating message : ', err)\n        callback(err, null);\n        return\n      }\n      if (dkimPrivateKey) {\n        const signature = DKIMSign(message, {\n          privateKey: dkimPrivateKey,\n          keySelector: dkimKeySelector,\n          domainName: srcHost\n        });\n        message = signature + '\\r\\n' + message\n      }\n      for (let domain in groups) {\n        sendToSMTP(domain, srcHost, from, groups[domain], message, callback)\n      }\n    });\n  }\n  return sendmail\n};\n"]},"metadata":{},"sourceType":"script"}